/**
 * Solar Admin Portal V2 - Configuration Export
 * This file is automatically generated by the admin portal
 * Do not edit manually - use the admin portal instead
 */

class SolarConfigV2 {
    constructor() {
        this.data = this.loadConfig();
    }
    
    /**
     * Load configuration from localStorage
     */
    loadConfig() {
        const savedData = localStorage.getItem('solarAdminV2Data');
        if (savedData) {
            return JSON.parse(savedData);
        }
        
        // Return empty structure if no data
        return {
            inverters: [],
            batteries: [],
            panels: [],
            rooftypes: [],
            phases: [],
            accessories: [],
            installation: [],
            systems: []
        };
    }
    
    /**
     * Get all systems
     */
    getSystems() {
        return this.data.systems.map(system => {
            return {
                id: system.id,
                name: system.name,
                inverter: this.getInverterById(system.inverter),
                batteries: system.batteries.map(id => this.getBatteryById(id)),
                batteryMin: system.batteryMin,
                batteryMax: system.batteryMax,
                panels: system.panels.map(id => this.getPanelById(id)),
                panelMin: system.panelMin,
                panelMax: system.panelMax,
                rooftypes: system.rooftypes.map(id => this.getRoofTypeById(id)),
                phase: this.getPhaseById(system.phase),
                accessories: this.getAccessoryById(system.accessories),
                installation: this.getInstallationById(system.installation)
            };
        });
    }
    
    /**
     * Get system by ID
     */
    getSystemById(systemId) {
        const system = this.data.systems.find(s => s.id === systemId);
        if (!system) return null;
        
        return {
            id: system.id,
            name: system.name,
            inverter: this.getInverterById(system.inverter),
            batteries: system.batteries.map(id => this.getBatteryById(id)),
            batteryMin: system.batteryMin,
            batteryMax: system.batteryMax,
            panels: system.panels.map(id => this.getPanelById(id)),
            panelMin: system.panelMin,
            panelMax: system.panelMax,
            rooftypes: system.rooftypes.map(id => this.getRoofTypeById(id)),
            phase: this.getPhaseById(system.phase),
            accessories: this.getAccessoryById(system.accessories),
            installation: this.getInstallationById(system.installation)
        };
    }
    
    /**
     * Calculate system price based on configuration
     */
    calculateSystemPrice(systemId, config) {
        const system = this.getSystemById(systemId);
        if (!system) return 0;
        
        let totalPrice = 0;
        
        // Inverter price
        if (system.inverter) {
            totalPrice += parseFloat(system.inverter.price);
        }
        
        // Battery price
        if (config.batteryType && config.batteryQuantity > 0) {
            const battery = this.getBatteryById(config.batteryType);
            if (battery) {
                totalPrice += parseFloat(battery.price) * config.batteryQuantity;
            }
        }
        
        // Panel price
        if (config.panelType && config.panelQuantity > 0) {
            const panel = this.getPanelById(config.panelType);
            if (panel) {
                totalPrice += parseFloat(panel.price) * config.panelQuantity;
            }
        }
        
        // Mounting kit price (roof type * panel quantity)
        if (config.roofType && config.panelQuantity > 0) {
            const rooftype = this.getRoofTypeById(config.roofType);
            if (rooftype) {
                totalPrice += parseFloat(rooftype.price) * config.panelQuantity;
            }
        }
        
        // Installation phase price
        if (system.phase) {
            totalPrice += parseFloat(system.phase.price);
        }
        
        // Accessories price
        if (system.accessories) {
            totalPrice += parseFloat(system.accessories.price);
        }
        
        // Installation price
        if (system.installation) {
            totalPrice += parseFloat(system.installation.price);
        }
        
        return totalPrice;
    }
    
    /**
     * Get detailed price breakdown
     */
    getPriceBreakdown(systemId, config) {
        const system = this.getSystemById(systemId);
        if (!system) return null;
        
        const breakdown = {
            items: [],
            total: 0
        };
        
        // Inverter
        if (system.inverter) {
            const price = parseFloat(system.inverter.price);
            breakdown.items.push({
                name: system.inverter.name,
                quantity: 1,
                unitPrice: price,
                totalPrice: price
            });
            breakdown.total += price;
        }
        
        // Battery
        if (config.batteryType && config.batteryQuantity > 0) {
            const battery = this.getBatteryById(config.batteryType);
            if (battery) {
                const price = parseFloat(battery.price);
                const total = price * config.batteryQuantity;
                breakdown.items.push({
                    name: battery.name,
                    quantity: config.batteryQuantity,
                    unitPrice: price,
                    totalPrice: total
                });
                breakdown.total += total;
            }
        }
        
        // Panel
        if (config.panelType && config.panelQuantity > 0) {
            const panel = this.getPanelById(config.panelType);
            if (panel) {
                const price = parseFloat(panel.price);
                const total = price * config.panelQuantity;
                breakdown.items.push({
                    name: panel.name,
                    quantity: config.panelQuantity,
                    unitPrice: price,
                    totalPrice: total
                });
                breakdown.total += total;
            }
        }
        
        // Mounting kit
        if (config.roofType && config.panelQuantity > 0) {
            const rooftype = this.getRoofTypeById(config.roofType);
            if (rooftype) {
                const price = parseFloat(rooftype.price);
                const total = price * config.panelQuantity;
                breakdown.items.push({
                    name: `Solar Panel Mounting Kit (${rooftype.name})`,
                    quantity: config.panelQuantity,
                    unitPrice: price,
                    totalPrice: total
                });
                breakdown.total += total;
            }
        }
        
        // Installation phase
        if (system.phase) {
            const price = parseFloat(system.phase.price);
            breakdown.items.push({
                name: system.phase.name,
                quantity: 1,
                unitPrice: price,
                totalPrice: price
            });
            breakdown.total += price;
        }
        
        // Accessories
        if (system.accessories) {
            const price = parseFloat(system.accessories.price);
            breakdown.items.push({
                name: system.accessories.name,
                quantity: 1,
                unitPrice: price,
                totalPrice: price
            });
            breakdown.total += price;
        }
        
        // Installation
        if (system.installation) {
            const price = parseFloat(system.installation.price);
            breakdown.items.push({
                name: system.installation.name,
                quantity: 1,
                unitPrice: price,
                totalPrice: price
            });
            breakdown.total += price;
        }
        
        return breakdown;
    }
    
    /**
     * Validate system configuration
     */
    validateConfig(systemId, config) {
        const system = this.getSystemById(systemId);
        if (!system) return { valid: false, errors: ['System not found'] };
        
        const errors = [];
        
        // Validate battery quantity
        if (config.batteryQuantity < system.batteryMin) {
            if (system.batteryMin === 0) {
                errors.push('Batteries not available for this system');
            } else {
                errors.push(`Minimum ${system.batteryMin} batteries required`);
            }
        }
        if (config.batteryQuantity > system.batteryMax) {
            errors.push(`Maximum ${system.batteryMax} batteries allowed`);
        }
        
        // Validate panel quantity
        if (config.panelQuantity < system.panelMin && config.panelQuantity !== 0) {
            errors.push(`Minimum ${system.panelMin} panels required (or 0 for no panels)`);
        }
        if (config.panelQuantity > system.panelMax) {
            errors.push(`Maximum ${system.panelMax} panels allowed`);
        }
        
        // Validate battery type is in allowed list
        if (config.batteryType && !system.batteries.find(b => b.id === config.batteryType)) {
            errors.push('Selected battery type not available for this system');
        }
        
        // Validate panel type is in allowed list
        if (config.panelType && !system.panels.find(p => p.id === config.panelType)) {
            errors.push('Selected panel type not available for this system');
        }
        
        // Validate roof type is in allowed list
        if (config.roofType && !system.rooftypes.find(r => r.id === config.roofType)) {
            errors.push('Selected roof type not available for this system');
        }
        
        return {
            valid: errors.length === 0,
            errors: errors
        };
    }
    
    // Helper methods to get items by ID
    getInverterById(id) {
        return this.data.inverters.find(i => i.id === id) || null;
    }
    
    getBatteryById(id) {
        return this.data.batteries.find(b => b.id === id) || null;
    }
    
    getPanelById(id) {
        return this.data.panels.find(p => p.id === id) || null;
    }
    
    getRoofTypeById(id) {
        return this.data.rooftypes.find(r => r.id === id) || null;
    }
    
    getPhaseById(id) {
        return this.data.phases.find(p => p.id === id) || null;
    }
    
    getAccessoryById(id) {
        return this.data.accessories.find(a => a.id === id) || null;
    }
    
    getInstallationById(id) {
        return this.data.installation.find(i => i.id === id) || null;
    }
}

// Create global instance
const solarConfigV2 = new SolarConfigV2();

// Export for use in modules
if (typeof module !== 'undefined' && module.exports) {
    module.exports = { SolarConfigV2, solarConfigV2 };
}

